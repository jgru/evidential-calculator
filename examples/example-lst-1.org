#+title: Literate Calculation of Evidence Sets for Example 1
#+PROPERTY: header-args :session ex-lst-1

This example provides a basic introduction to the GCL notation and our
evidence calculations.

* Setup

Activate the virtual environment =venv=
#+begin_src elisp :results silent :var path="../"
(pyvenv-activate (concat path "/venv"))
#+end_src

Import the =evidental_calculator=-module:
#+name: prep
#+begin_src python :results output :var path="../"
import sys
from pathlib import Path

# Make custom modules accessible for Python env
base = Path(path)
sys.path.append(str(base / "src"))
import evidence_set_calculation.smv_based_evidence as sbe
import evidence_set_calculation.utils as utils

print("Successfully imported evidence_set_calculation-module")
#+end_src

#+RESULTS: prep
: Successfully imported evidence_set_calculation-module

* Model Specification
** GCL Specification
#+name: ex-lst-1-gcl
#+begin_example
variables {a, b}
init {a=0, b=0}
actions a0: a=0 -> a:=1;
        a1: b=0 -> b:=1;
#+end_example
** SMV Specification
The GCL program given in listing [[ex-lst-1-gcl]] can be transformed into the
below-mentioned SMV-model:

#+name: ex-lst-1-smv
#+begin_example
MODULE main
    VAR
        action: {a0, a1, unconstrain};
        a: boolean;
        b: boolean;
    INIT
        a = FALSE
    INIT
        b = FALSE
    INIT
        action = unconstrain
    ASSIGN
        next(a) := 
            case
                next(action) = a0: TRUE;
                TRUE: a;
            esac;
        next(b) :=
            case
                next(action) = a1: TRUE;
                TRUE: b;
            esac;
    TRANS
        next(action) = a0 -> a = FALSE
    TRANS
        next(action) = a1 -> b = FALSE
    TRANS
        next(action) = unconstrain -> TRUE
#+end_example


* Calculation of Evidence Sets
:PROPERTIES:
:header-args+: :results output table raw :var model_data=ex-lst-1-smv
:END:
** Action-induced Evidence
#+begin_src python
is_compound = False  # Look at each variable individually
actions = []  # Consider all actions in the model

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    es = ep.calc_set(sbe.EvidenceType.action_induced, actions, is_compound)
    # Output evidence sets as table
    utils.output_evidence_set(es, "org")
#+end_src

#+RESULTS:
|-------------------------+-------------|
| Desc                    | Assignments |
|-------------------------+-------------|
| Evidence of a0          | {a: TRUE}   |
|-------------------------+-------------|
| Evidence of a1          | {b: TRUE}   |
|-------------------------+-------------|
| Evidence of unconstrain |             |
|-------------------------+-------------|

** Sufficient Evidence
#+begin_src python
is_compound = False  # Look at each variable individually
actions = []  # Consider all actions in the model

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    es = ep.calc_set(sbe.EvidenceType.sufficient, actions, is_compound)
    # Output evidence sets as table
    utils.output_evidence_set(es, "org")
#+end_src

#+RESULTS:
|-------------------------+-------------|
| Desc                    | Assignments |
|-------------------------+-------------|
| Evidence of a0          | {a: TRUE}   |
|-------------------------+-------------|
| Evidence of a1          | {b: TRUE}   |
|-------------------------+-------------|
| Evidence of unconstrain |             |
|-------------------------+-------------|

** Necessary Evidence
#+begin_src python
is_compound = True  # Look at each variable individually
actions = None  # Consider all actions in the model

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    es = ep.calc_set(sbe.EvidenceType.necessary, actions, is_compound)
    # Output evidence sets as table
    utils.output_evidence_set(es, "org")
#+end_src

#+RESULTS:
|-------------------------+---------------------|
| Desc                    | Assignments         |
|-------------------------+---------------------|
| Evidence of a0          | {a: TRUE}           |
|                         | {a: TRUE, b: TRUE}  |
|                         | {a: TRUE, b: FALSE} |
|-------------------------+---------------------|
| Evidence of a1          | {b: TRUE}           |
|                         | {a: TRUE, b: TRUE}  |
|                         | {a: FALSE, b: TRUE} |
|-------------------------+---------------------|
| Evidence of unconstrain |                     |
|-------------------------+---------------------|


