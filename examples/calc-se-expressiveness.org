#+options: toc:nil
#+property: header-args :session ex-lst-4

* Technical Setup
Activate the virtual environment =venv=
#+begin_src elisp :results silent :var path="../"
(pyvenv-activate (concat path "/venv"))
#+end_src

Import the =evidental_calculator=-module:
#+name: prep
#+begin_src python :results output :var path="../"
import sys
from pathlib import Path

# Make custom modules accessible for Python env
base = Path(path)
sys.path.append(str(base / "src"))
import evidence_set_calculation.smv_based_evidence as sbe
import evidence_set_calculation.utils as utils

print("Successfully imported evidence_set_calculation-module")
#+end_src

#+RESULTS: prep
: Successfully imported evidence_set_calculation-module

* Model Specification
** GCL Specification
#+name: ex-lst-4-gcl
#+begin_example
variables {a, b, c, d}
init {a=0, b=0, c=0, d=0}
actions
        a0: TRUE-> a := 1;
        a1: a=1 -> b := 1;
        a2: b=1 -> c := 1 && d := 0;
        a3: b=1 -> d := 1 && b := 0;
#+end_example

** SMV Specification
#+name: ex-lst-4-smv
#+begin_example
MODULE main
    VAR
        action: {a0, a1, a2, a3, unconstrain};
        a: boolean;
        b: boolean;
        c: boolean;
        d: boolean;
    INIT
        a = FALSE
    INIT
        b = FALSE
    INIT
        c = FALSE
    INIT
        d = FALSE
    INIT
        action = unconstrain
    ASSIGN
        next(a) :=
            case
                next(action) = a0: TRUE;
                TRUE: a;
            esac;
        next(b) :=
            case
                next(action) = a1: TRUE;
                next(action) = a3: FALSE;
                TRUE: b;
            esac;
        next(c) :=
            case
                next(action) = a2: TRUE;
                TRUE: c;
            esac;
        next(d) :=
            case
                next(action) = a2: FALSE;
                next(action) = a3: TRUE;
                TRUE: d;
            esac;
    TRANS
        next(action) = a0 -> TRUE
    TRANS
        next(action) = a1 -> a = TRUE
    TRANS
        next(action) = a2 -> b = TRUE
    TRANS
        next(action) = a3 -> b = TRUE
    TRANS
        next(action) = unconstrain -> TRUE
#+end_example


* Calculation of Sufficient Evidence
:PROPERTIES:
:header-args+: :results output table raw :var model_data=ex-lst-4-smv
:END:

#+begin_src python
actions = []
_type = sbe.EvidenceType.sufficient

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    es = ep.calc_set(_type, actions)
    # Output evidence sets as table
    utils.output_evidence_set(es, _type, "org")
#print(es)
#+end_src

#+RESULTS:
|-------------------------+--------------------------------------|
| Desc                    | Assignments                          |
|-------------------------+--------------------------------------|
| Evidence of a0          | a=TRUE \/ b=TRUE \/ c=TRUE \/ d=TRUE |
|-------------------------+--------------------------------------|
| Evidence of a1          | b=TRUE \/ c=TRUE \/ d=TRUE           |
|-------------------------+--------------------------------------|
| Evidence of a2          | c=TRUE                               |
|-------------------------+--------------------------------------|
| Evidence of a3          | d=TRUE \/ ( b=FALSE /\ c=TRUE )      |
|-------------------------+--------------------------------------|
| Evidence of unconstrain |                                      |
|-------------------------+--------------------------------------|

** Evidence Expressiveness

#+begin_src python :results output table raw :exports both
from functools import reduce
from operator import iconcat

actions = []
_type = sbe.EvidenceType.sufficient

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    actions_to_evidence = ep.calc_set(_type, actions)

    # Retrieve all actions
    actions = actions_to_evidence.keys()

    # Retrieve all facets
    facets = set(
        [
            frozenset(elem.items())
            for elem in reduce(iconcat, actions_to_evidence.values())
        ]
    )

    print("| Facet | Expressiveness |")

    # Determine expressiveness of each facet by calculating
    # E(p) =
    # \frac{\big\vert\{\sigma \in \Sigma \mid \exists \rho \in
    # SE(\sigma,M):\, \rho \sqsubseteq p\}\big\vert}{|\Sigma|}

    for p in facets:
        e_p = sum(
            map(
                lambda k: any(
                    [
                        k
                        for rho in actions_to_evidence[k]
                        if all(e in p for e in rho.items())
                    ]
                ),
                actions,
            )
        ) / len(actions)

        print(f"|{utils.evidence_elem_to_formula(dict(p), _type)}| {e_p}|")
#+end_src

#+RESULTS:
| Facet            | Expressiveness |
| a=TRUE           |            0.2 |
| c=TRUE           |            0.6 |
| b=TRUE           |            0.4 |
| d=TRUE           |            0.6 |
| b=FALSE & c=TRUE |            0.8 |
