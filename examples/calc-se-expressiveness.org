 #+options: toc:nil
#+property: header-args :session ex-lst-4

* Technical Setup
Activate the virtual environment =venv=
#+begin_src elisp :results silent :var path="../"
(pyvenv-activate (concat path "/venv"))
#+end_src

Import the =evidental_calculator=-module:
#+name: prep
#+begin_src python :results output :var path="../"
import sys
from pathlib import Path

# Make custom modules accessible for Python env
base = Path(path)
sys.path.append(str(base / "src"))
import evidence_set_calculation.smv_based_evidence as sbe
import evidence_set_calculation.utils as utils

print("Successfully imported evidence_set_calculation-module")
#+end_src

#+RESULTS: prep
: Successfully imported evidence_set_calculation-module

* Model Specification
** GCL Specification
#+name: ex-lst-4-gcl
#+begin_example
variables {a, b, c, d}
init {a=0, b=0, c=0, d=0}
actions
        a0: TRUE-> a := 1;
        a1: a=1 -> b := 1;
        a2: b=1 -> c := 1 && d := 0;
        a3: b=1 -> d := 1 && b := 0;
#+end_example

** SMV Specification
#+name: ex-lst-4-smv
#+begin_example
MODULE main
    VAR
        action: {a0, a1, a2, a3, unconstrain};
        a: boolean;
        b: boolean;
        c: boolean;
        d: boolean;
    INIT
        a = FALSE
    INIT
        b = FALSE
    INIT
        c = FALSE
    INIT
        d = FALSE
    INIT
        action = unconstrain
    ASSIGN
        next(a) :=
            case
                next(action) = a0: TRUE;
                TRUE: a;
            esac;
        next(b) :=
            case
                next(action) = a1: TRUE;
                next(action) = a3: FALSE;
                TRUE: b;
            esac;
        next(c) :=
            case
                next(action) = a2: TRUE;
                TRUE: c;
            esac;
        next(d) :=
            case
                next(action) = a2: FALSE;
                next(action) = a3: TRUE;
                TRUE: d;
            esac;
    TRANS
        next(action) = a0 -> TRUE
    TRANS
        next(action) = a1 -> a = TRUE
    TRANS
        next(action) = a2 -> b = TRUE
    TRANS
        next(action) = a3 -> b = TRUE
    TRANS
        next(action) = unconstrain -> TRUE
#+end_example


* Calculation of Sufficient Evidence
:PROPERTIES:
:header-args+: :results output table raw :var model_data=ex-lst-4-smv
:END:

#+begin_src python
actions = []
_type = sbe.EvidenceType.sufficient

with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    es = ep.calc_set(_type, actions)

    # Output evidence sets as table
    utils.output_evidence_set(es, _type, "org")
#print(es)
#+end_src

#+RESULTS:
|-------------------------+--------------------------------------|
| Desc                    | Assignments                          |
|-------------------------+--------------------------------------|
| Evidence of a0          | a=TRUE \/ b=TRUE \/ c=TRUE \/ d=TRUE |
|-------------------------+--------------------------------------|
| Evidence of a1          | b=TRUE \/ c=TRUE \/ d=TRUE           |
|-------------------------+--------------------------------------|
| Evidence of a2          | c=TRUE                               |
|-------------------------+--------------------------------------|
| Evidence of a3          | d=TRUE \/ ( b=FALSE /\ c=TRUE )      |
|-------------------------+--------------------------------------|
| Evidence of unconstrain |                                      |
|-------------------------+--------------------------------------|

** Evidence Expressiveness

The following snippet calculates specific expressiveness ratios for facets of the example program 4;

Only facets are considered that contribute to the assessment of at
least one hypothesis, thus the expressiveness ratios of facets \(\widetilde{F} = \{ f \in F : \vert \mathcal{X}_{f}\vert \geq 1 \}\) w.r.t. the set of hypotheses \(H = \{\mathtt{a0}, \mathtt{a1}, \mathtt{a2}, \mathtt{a3} \}\) are listed.

#+begin_src python :results output verbatim :exports both
from functools import reduce
from operator import iconcat
import copy

from pynusmv.model import Not, Trueexp, Falseexp

actions = []
ignore = ["unconstrain", "not unconstrain"]

def negate(t: str):
    if t == Trueexp():
        return Falseexp()
    elif t == Falseexp():
        return Trueexp()
    else:
        raise ValueError(
            f"Cannot handle {t}"
            "Only [pynusmv.model.Trueexp, pynusmv.model.Falseexp] can be handled"
        )

def negate_trace_dict(d):
    return {k:negate(v) for (k,v) in d.items()}


with sbe.NuSMVEvidenceProcessor(model_data) as ep:
    # Calc sufficient evidence for all actions
    actions_to_se = ep.calc_set(sbe.EvidenceType.sufficient, actions)
    actions_to_ne = ep.calc_set(sbe.EvidenceType.necessary, actions)

    actions_to_xe = {
        a:
        [
            negate_trace_dict(ee) for ee in e
        ]
        for (a,e) in actions_to_ne.items()
    }

    # Retrieve all actions -- supports-hypotheses
    actions = [a for a in actions_to_se.keys() if a not in ignore]

    
    actions_to_facets = copy.deepcopy({a:e for (a,e) in actions_to_se.items() if a not in ignore})

    for k, v in actions_to_xe.items():
        if k in actions_to_facets.keys():
            actions_to_facets[k].extend(v)
        elif k not in ignore:
            actions_to_facets[k] = v
    
    # Create a deep copies to work non destructively when extracting facets        
    actions_to_facets_copy = copy.deepcopy(actions_to_facets)
 
    # Retrieve all facets
    facets = set(
        [
            frozenset(elem.items())
            for elem in reduce(iconcat, actions_to_facets_copy.values())
        ]
    )

    # Determine expressiveness of each facet
    expressiveness_ratio = {}
    print("| Facet | Count | Expr")
    for p in facets:
        e_p_cnt = sum(
            map(
                lambda k: any(
                    [
                        k
                        for rho in actions_to_facets.get(k,[])
                        if rho.items() == p
                    ]
                ),
                actions_to_facets.keys(),
            )
        )
        e_p_ratio = e_p_cnt / len(actions_to_facets.keys())

        print(f"| {utils.evidence_elem_to_formula(dict(p), sbe.EvidenceType.sufficient)} | {e_p_cnt}| {e_p_ratio}")
#+end_src

#+RESULTS:
| Facet                          | Count | Expr |
| c=TRUE and b=FALSE and d=FALSE |     1 | 0.25 |
| c=TRUE and b=FALSE             |     1 | 0.25 |
| c=TRUE                         |     3 | 0.75 |
| a=FALSE                        |     4 |  1.0 |
| b=FALSE and d=FALSE            |     3 | 0.75 |
| a=TRUE                         |     1 | 0.25 |
| d=TRUE                         |     3 | 0.75 |
| b=TRUE                         |     2 |  0.5 |
| c=FALSE                        |     1 | 0.25 |
| d=FALSE and c=FALSE            |     1 | 0.25 |

